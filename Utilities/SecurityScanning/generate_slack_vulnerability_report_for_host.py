#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

import json
import argparse

argparser = argparse.ArgumentParser()
argparser.add_argument('--deployment_hostname', help="Name of the CARDS deployment (eg. cardsdemo.uhndata.io)")
argparser.add_argument('--vm_os_json_file', help="Path to the JSON file of the Slack block listing the detected vulnerabilities in a VM's OS")
argparser.add_argument('--docker_os_json_file', help="Path to the JSON file of the Slack block listing the detected vulnerabilities in a Docker container's OS")
argparser.add_argument('--maven_json_file', help="Path to the JSON file of the Slack block listing the detected vulnerabilities in a set of Maven packages")
argparser.add_argument('--npm_json_file', help="Path to the JSON file of the Slack block listing the detected vulnerabilities in a set of NPM/Yarn packages")
argparser.add_argument('--complete_report_path', help="Path to where the complete Markdown-formatted security scan report can be found (eg. https://github.com/username/cards-security/blob/main/reports/cards.host.md)")
argparser.add_argument('--output', help="Output JSON filepath")
args = argparser.parse_args()

slack_blocks = []

title_block = {}
title_block['type'] = 'header'
title_block['text'] = {'type': 'plain_text', 'text': args.deployment_hostname}
slack_blocks.append(title_block)

if args.vm_os_json_file:
	vm_os_title_block = {}
	vm_os_title_block['type'] = 'context'
	vm_os_title_block['elements'] = [{'type': 'mrkdwn', 'text': '*VM OS*'}]
	slack_blocks.append(vm_os_title_block)

	with open(args.vm_os_json_file, 'r') as f_vm_os_json:
		slack_blocks.append(json.load(f_vm_os_json))

if args.docker_os_json_file:
	docker_os_title_block = {}
	docker_os_title_block['type'] = 'context'
	docker_os_title_block['elements'] = [{'type': 'mrkdwn', 'text': '*Docker Image*'}]
	slack_blocks.append(docker_os_title_block)

	with open(args.docker_os_json_file, 'r') as f_docker_os_json:
		slack_blocks.append(json.load(f_docker_os_json))

if args.maven_json_file:
	maven_title_block = {}
	maven_title_block['type'] = 'context'
	maven_title_block['elements'] = [{'type': 'mrkdwn', 'text': '*Maven Packages*'}]
	slack_blocks.append(maven_title_block)

	with open(args.maven_json_file, 'r') as f_maven_json:
		slack_blocks.append(json.load(f_maven_json))

if args.npm_json_file:
	npm_title_block = {}
	npm_title_block['type'] = 'context'
	npm_title_block['elements'] = [{'type': 'mrkdwn', 'text': '*NPM/Yarn Packages*'}]
	slack_blocks.append(npm_title_block)

	with open(args.npm_json_file, 'r') as f_npm_json:
		slack_blocks.append(json.load(f_npm_json))

if args.complete_report_path:
	report_link_block = {}
	report_link_block['type'] = 'section'
	report_link_block['text'] = {}
	report_link_block['text']['type'] = 'mrkdwn'
	report_link_block['text']['text'] = "Full security scan report is available at " + args.complete_report_path
	slack_blocks.append(report_link_block)

with open(args.output, 'w') as f:
	json.dump(slack_blocks, f)
