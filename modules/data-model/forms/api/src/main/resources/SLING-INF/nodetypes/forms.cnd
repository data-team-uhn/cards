//
//  Licensed to the Apache Software Foundation (ASF) under one
//  or more contributor license agreements.  See the NOTICE file
//  distributed with this work for additional information
//  regarding copyright ownership.  The ASF licenses this file
//  to you under the Apache License, Version 2.0 (the
//  "License"); you may not use this file except in compliance
//  with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing,
//  software distributed under the License is distributed on an
//  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
//  KIND, either express or implied.  See the License for the
//  specific language governing permissions and limitations
//  under the License.
//

<sling = 'http://sling.apache.org/jcr/sling/1.0'>
<cards = 'https://cards.uhndata.io/'>

//-----------------------------------------------------------------------------
//
// Questionnaires: the definition of forms to be filled in.
//
// A questionnaire consists of one or more questions or sections,
// and sections in turn consist of one or more questions or subsections.
//
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// This defines predefined choices for answering a question.
// Used only as children of a cards:Question node.
[cards:AnswerOption] > sling:Folder, mix:referenceable
  // Attributes

  // The list of suboptions is orderable.
  orderable
  // We can use an option in a query.
  query
  // The main sub-item of an answer option is its label.
  primaryitem label
  // Properties

  // Hardcode the resource type.
  - sling:resourceType (STRING) = "cards/AnswerOption" mandatory autocreated protected

  // Hardcode the resource supertype: each question is a resource.
  - sling:resourceSuperType (STRING) = "cards/Resource" mandatory autocreated protected

  // The text of this option displayed to the user.
  // This is not the value that gets stored when it is selected for an aswer, the "value" property is.
  // Optional, if the label is missing, the "value" is used instead.
  - label (string)

  // An optional longer explanation for the answer option.
  // If present, a help icon will be displayed next to the label, and hovering/clicking it will display this help text.
  - help (string)

  // The value to store internally when this option is selected.
  // Separating the label from the stored value allows relabeling options without having to update all existing answers.
  // Mandatory, every option needs a stored value.
  - value (string) mandatory

  // If set, selecting this answer in a multiple choice question will remove _all other non-user-entered options_
  // (as in a "none of the above" option). In addition, selecting any other answer will unselect this option.
  - noneOfTheAbove (boolean)

  // If set, selecting this answer in a multiple choice question will remove _all other options, including user-entered ones_
  // (as in a "not applicable" option). In addition, selecting any other answer will unselect this option.
  - notApplicable (boolean)

  // Children

  // Answer options can be hierarchical, so an option may have suboptions.
  + * (cards:AnswerOption) = cards:AnswerOption

//-----------------------------------------------------------------------------
[cards:VocabularyFilterGroup] > sling:Folder, mix:referenceable
  // Hardcode the resource type.
  - sling:resourceType (STRING) = "cards/VocabularyFilterGroup" mandatory autocreated protected

  // Hardcode the resource supertype: each filter group is a resource.
  - sling:resourceSuperType (STRING) = "cards/Resource" mandatory autocreated protected

  - value (string)

//-----------------------------------------------------------------------------
// This is the definition of a question.
[cards:Question] > sling:Folder, mix:referenceable
  // Attributes

  // The list of answer options is orderable.
  orderable
  // We can use questions in a query.
  query
  // The main sub-item of a question is its text.
  primaryitem text

  // Properties

  // Hardcode the resource type.
  - sling:resourceType (STRING) = "cards/Question" mandatory autocreated protected

  // Hardcode the resource supertype: each question is a resource.
  - sling:resourceSuperType (STRING) = "cards/Resource" mandatory autocreated protected

  // The text of the question.
  - text (string)

  // An optional longer explanation/description for the question.
  // If present, it will be displayed right under the question text.
  - description (string)

  // The minimum number of answers that must be selected.
  // 0 or negative values means no minimum.
  // If a strictly positive number is set, then the question becomes mandatory.
  - minAnswers (long) = '0' autocreated

  // The maximum number of answers that can be selected.
  // 0 or negative values means no maximum.
  - maxAnswers (long) = '0' autocreated

  // Mimimum and maximum answers that must be selected define how a question can be answered.
  // The default is (-, -), no mimimum and no maximum, which means that any number of options can be selected -- optional checkboxes.
  // (-, 1) means that at most one option can be selected, making the question an optional list to chose from -- optional radio boxes.
  // (1, -) makes the question mandatory, at least one answer must be selected -- mandatory checkboxes.
  // (1, 1) makes the question mandatory, exactly one option must be selected -- mandatory radio boxes.
  // (N, -), where N > 1, makes this a list of checkboxes, and at least N must be checked.
  // (N, M), where 1 < N <= M, makes this a list of checkboxes, and between N and M must be checked.

  // How are the answer options displayed?
  // The possible values are not limited, since support for new display modes can be added by other modules,
  // but at least the following are supported:
  // - none: the question is not displayed at all in the frontend
  // - hidden: the question is hidden, but it may be auto-filled by other means, such as javascript, data import, or dynamic computation
  // - input: a simple input field where the user can type an answer
  // - textbox: a large textbox for longer strings
  // - list: a list of options that the user can choose from
  // - list+input: a list of options, plus an "other" input where the user can add a non-standard answer
  - displayMode (string) = 'input' autocreated

  // Which type of data is being recorded?
  // The possible values are not limited, since support for new data types can be added by other modules,
  // but at least the following are supported:
  // - text: simple text, either from a list of predefined options, or free text entered by the user
  // - long, double, decimal: a number
  // - date: a date, with optional time
  // - boolean: a yes/no answer
  // - vocabulary: a term from a vocabulary
  // - file: an uploaded file
  // - computed: a derived value automatically computed based on a formula applied on other values in the questionaire
  // The answer type can be further refined with the following properties
  - dataType (string) = 'text' mandatory autocreated

  // For text answers, a regular expression that can restrict/validate the allowed answers.
  - validationRegexp (string)

  // For text answers that are multivalued and display an input, enable detecting separators
  // (,;) and notifying the user that each option should be entered separately by
  // pressing ENTER
  - enableSeparatorDetection (boolean)

  // For numeric answers, the minimum and maximum allowed values
  - minValue (double)
  - maxValue (double)

  // For questions that have a list of options, whether all the options are displayed on a single line (compact), or one per line (default)
  - compact (boolean)

  // For numeric answers, the measurement unit used for the value (kg, cm, cGy...).
  // This will be displayed as an input end adornment.
  - unitOfMeasurement (string)

  // For date answers, the format in which to display (and accept as input) the date.
  // This is a SimpleDateFormat compatible string.
  - dateFormat (string)

  // For vocabulary answers, the source vocabularies array (or categories of vocabularies) in which to search.
  // A simple label like "MONDO", or a value prefixed by "vocabulary:" such as "vocabulary:MONDO" identifies a specific vocabulary.
  // A value prefixed by "category:" such as "category:diseases" identifies a vocabulary category.
  - sourceVocabularies (string) multiple

  // For vocabulary answers, an extra filter to apply to the query, which can be used, for example,
  // to restrict results to a specific sub-branch, or a specific type of terms.
  // If defined, this must be a valid solr query that can be placed in the "fq" field.
  - vocabularyFilter (string)

  // For chromosome answers, display the number (N) amount of chromosomes. For example,
  // in humans, this number would be 22, displaying chromosomes 1-22.
  - chromosomeNumber (long)

  // For chromosome answers, should the X chromosome be displayed
  - chromosomeX (boolean)

  // For chromosome answers, should the Y chromosome be displayed
  - chromosomeY (boolean)

  // For chromosome answers, should the Z chromosome be displayed
  - chromosomeZ (boolean)

  // For chromosome answers, should the W chromosome be displayed
  - chromosomeW (boolean)

  // For chromosome answers, should MT (mitochondria) be listed
  - chromosomeMT (boolean)

  // For file answers, a string specifying how the filename can be processed to extract related fields from it.
  // The format of this field is a regular expression, combined with @{variable} constructs that will be extracted from the actual filename and set back into the form.
  // For example:
  // .{9}_@{gender}_{@relation_to_proband}\.csv
  // will match a filename that starts with any 9 characters, followed by underscore, followed by the patient's gender, followed by the patient's relation to the proband.
  // When a file named "001436721_F_Mother.csv" is uploaded in a Demographics form, the "Gender" question will be set to "F" (Female), and the "Relation to proband" question will be set to "Mother".
  // If a file doesn't match the name pattern, then no form values will be changed.
  - namePattern (string)

  // Some questions may be answered with long stories, which may have useful information but should not be stored as-is without curation.
  // We allow users to place these answers in a Notes section
  - enableNotes (boolean)

  // Specifies what method is used to fill out this question
  // - user: Filled out by an end user
  // - computed: Automatically calculated based on user's other inputs
  - entryMode (string) = 'user' autocreated

  // For computed answers, the expression used to calculate the value
  - expression (string)

  // Since not all properties are mandatory, customizing a question requires defining only
  // the properties of interest.
  //
  // Note that the node type does not prevent adding other properties not defined above,
  // so for a custom question type needing other customization options it is enough to
  // simply add new properties.

  // Children

  // The list of predefined options displayed to the user.
  // This applies mostly to text answers, but can also be used for the other answer types as well, for example as a list of dates to choose from, or a list of numbers, or a list of vocabulary terms.
  + * (cards:AnswerOption) = cards:AnswerOption
  + * (cards:VocabularyFilterGroup) = cards:VocabularyFilterGroup
  + * (cards:ExternalLink) = cards:ExternalLink

//-----------------------------------------------------------------------------
// An informative formatted text (markdown) displayed in edit mode to guide
// the user through filling out a form.
[cards:Information] > sling:Folder, mix:referenceable
  // Attributes

  // The main sub-item of a section is its text.
  primaryitem text

  // Properties

  // Hardcode the resource type.
  - sling:resourceType (STRING) = "cards/Information" mandatory autocreated protected

  // Hardcode the resource supertype: each info is a resource.
  - sling:resourceSuperType (STRING) = "cards/Resource" mandatory autocreated protected

  // The text provided as information. Optional, it is possible not to have any text.
  - text (string)

  // The type dictates the text and background colors used when displaying the information.
  // One of: plain (normal text and background), info (blue), warning (orange), error (red),
  // success (green). Optional, defaults to plain styling when absent.
  - type (string)

//-----------------------------------------------------------------------------
// A section is a collection of questions.
[cards:Section] > sling:Folder, mix:referenceable
  // Attributes

  // The list of subsections and questions is orderable.
  orderable
  // We can use sections in a query.
  query
  // The main sub-item of a section is its label.
  primaryitem label

  // Properties

  // Hardcode the resource type.
  - sling:resourceType (STRING) = "cards/Section" mandatory autocreated protected

  // Hardcode the resource supertype: each section is a resource.
  - sling:resourceSuperType (STRING) = "cards/Resource" mandatory autocreated protected

  // A label for this section. Optional, it is possible not to have a label.
  // If present, it will be displayed to the user above the questions.
  - label (string)

  // An optional longer description for this section.
  // If present, it will be displayed to the user between the label and the questions.
  - description (string)

  // Can this section be repeated?
  - recurrent (boolean) = false autocreated

  // Section display mode, one of default, header, footer, matrix
  - displayMode (string) = 'default' autocreated

  // Same as for cards:Question.
  - minAnswers (long) = '0' autocreated

  // Same as for cards:Question.
  - maxAnswers (long) = '0' autocreated

  // Which type of data is being recorded?
  // The possible values are limited to:
  // - text: simple text, either from a list of predefined options, or free text entered by the user
  // - long, double, decimal: a number
  // - vocabulary: a term from a vocabulary
  - dataType (string) = 'text' mandatory autocreated

  // Children

  // The questions and sub-sections that make up this section.
  // The conditions to display this section may also be listed as children
  + * (cards:Question, cards:Section, cards:Information, cards:Conditional, cards:ConditionalGroup, cards:AnswerOption, cards:ExternalLink) = cards:Question

//-----------------------------------------------------------------------------
// A conditional group is a set of conditions that can be imposed on e.g. the display of a section.
// The conditions are listed as children of this, and may be turned from an OR to an AND via the
// `requireAll` property.
[cards:ConditionalGroup] > sling:Folder
  // Attributes

  // The list of conditions is orderable.
  orderable
  // Conditionals are queryable
  query

  // Properties

  // Hardcode the resource type.
  - sling:resourceType (STRING) = "cards/ConditionalGroup" mandatory autocreated protected

  // Hardcode the resource supertype: each section link is a resource.
  - sling:resourceSuperType (STRING) = "cards/Resource" mandatory autocreated protected

  - requireAll (BOOLEAN) = false mandatory autocreated

  // This conditional may contain any number of conditionals or conditional groups
  + * (cards:Conditional, cards:ConditionalGroup) = cards:Conditional

//-----------------------------------------------------------------------------
// A conditional is a condition that can be imposed on e.g. the display of a section.
[cards:Conditional] > sling:Folder
  // Attributes

  // The list of operands and operator is orderable.
  orderable
  // Conditionals are queryable
  query
  // Our children are orderable, and may be executable in a specific order
  orderable

  // Properties

  // Hardcode the resource type.
  - sling:resourceType (STRING) = "cards/Conditional" mandatory autocreated protected

  // Hardcode the resource supertype: each section link is a resource.
  - sling:resourceSuperType (STRING) = "cards/Resource" mandatory autocreated protected

  // A conditional will always have a child node called operandA of type ConditionalValue
  + operandA (cards:ConditionalValue) mandatory

  // A conditional always has exactly one comparator
  - comparator (STRING) mandatory

  // A second child operandB may be specified, but leaving it as the default is OK if the comparator is singular
  + operandB (cards:ConditionalValue) = cards:ConditionalValue autocreated

  // Specifies how the operands should be treated when performing the comparison (default: string)
  - dataType (STRING) = "text" autocreated

//-----------------------------------------------------------------------------
// A conditional value is either a value or a method of getting a value.
[cards:ConditionalValue] > sling:Resource
  // Attributes

  // We don't have children, but let's assume children might need to be ordered in the future.
  orderable
  // The main sub-item of an answer is its value.
  primaryitem value
  // Conditional values are queryable
  query

  // Properties

  // Hardcode the resource type.
  - sling:resourceType (STRING) = "cards/ConditionalValue" mandatory autocreated protected

  // Hardcode the resource supertype: each value is a resource.
  - sling:resourceSuperType (STRING) = "cards/Resource" mandatory autocreated protected

  // The value which may be a reference to a field or a value (or multiple values)
  - value (undefined) multiple

  // Whether or not this value is a reference or not
  - isReference (BOOLEAN) = false autocreated

  // Require that the parent conditional checks every value (for a multi-valued field)
  // Otherwise it will return true if at least one value fits
  - requireAll (BOOLEAN) = false mandatory autocreated

  // We don't define any subchildren.

//-----------------------------------------------------------------------------
// A questionnaire is a collection of sections and questions.
[cards:Questionnaire] > sling:Folder, mix:referenceable, mix:versionable, mix:lastModified
  // Attributes

  // The list of sections and questions is orderable.
  orderable
  // We can use questionnaires in a query.
  query
  // The main sub-item of a questionnaire is its title.
  primaryitem title

  // Properties

  // Hardcode the resource type.
  - sling:resourceType (STRING) = "cards/Questionnaire" mandatory autocreated protected

  // Hardcode the resource supertype: each questionnaire is a resource.
  - sling:resourceSuperType (STRING) = "cards/Resource" mandatory autocreated protected

  // A title for this questionnaire.
  // Mandatory, each questionnaire must have a title.
  - title (string) mandatory

  // An optional longer description for this questionnaire.
  // If present, it will be displayed to the user between the label and the sections.
  - description (string)

  // An optional list of cards:SubjectTypes.
  // Any Forms for this questionnaire must have a subject with a type on the list.
  // If the list is empty, then any subject type is accepted.
  - requiredSubjectTypes (REFERENCE) multiple

  // An optional maximum number of a certain form that can be created for a subject
  // If present, the maximum number cannot be exceeded
  - maxPerSubject (long)

  // Should this section be displayed as a page
  - paginate (boolean) = false autocreated

  // If true, warn the user about missing mandatory answers when they save an incomplete form.
  // In paginated forms, do not permit advancing to the next page until the current page is complete.
  - requireCompletion (BOOLEAN)

  // If true, notes such as "This answer is required" or "Please provide at least 3 files"
  // will not be shown under the text of the questions with such restrictions, unless
  // requireCompletion is true and the question is highlighted for having a missing or
  // invalid answer
  - hideAnswerInstructions (BOOLEAN)

  // Children

  // The sections and standalone questions that make up this questionnaire.
  + * (cards:Section, cards:Question, cards:Information, cards:ExternalLink) = cards:Section

//-----------------------------------------------------------------------------
// The homepage for the questionnaires space.
[cards:QuestionnairesHomepage] > sling:Folder
  // Attributes:

  // We can use this homepage in a query.
  query

  // Properties:

  // Hardcode the resource type.
  - sling:resourceType (STRING) = "cards/QuestionnairesHomepage" mandatory autocreated protected

  // Hardcode the resource supertype: the QuestionnairesHomepage is a resource homepage.
  - sling:resourceSuperType (STRING) = "cards/ResourceHomepage" mandatory autocreated protected

  // Set a default title.
  - title (String) = "Questionnaires" mandatory autocreated

  - childNodeType (String) = "cards:Questionnaire" mandatory autocreated

//-----------------------------------------------------------------------------
//
// Forms: instances of filled in questionnaires.
//
// A form consists of one or more answers.
//
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Base nodetype for structured answers.
// Answers will be used as child nodes of a record, one node per answer.
// This means that for a given question, the answer may either:
// - not exist, if the question isn't answered yet
// - have a single child node referencing that question, if the question expects a single choice
// - have multiple child nodes referencing that question, if it allows more than one choice, one node for each answer
// - have multiple child nodes referencing that question AND an identifier for the question instance,
//   if the question can be repeated, for example a question that must be answered for each relative,
//   or for each occurrence of an event
// The name of each answer node is not relevant and will be automatically generated, only the reference to the question matters.
// The meaning of an answer is defined by the question, so most of the display properties are defined in the question, not in the answer.
// In other words, an Answer node is just simple storage.
[cards:Answer] > sling:Folder
  // Attributes

  // This is an abstract node type, specific answer types must be defined.
  abstract
  // Even though we don't expect child nodes for an answer, let's assume they will need to be orderable.
  orderable
  // We can use answers in a query.
  query
  // The main sub-item of an answer is its value.
  primaryitem value

  // Properties

  // Hardcode the resource type.
  - sling:resourceType (STRING) = "cards/Answer" mandatory autocreated protected

  // Hardcode the resource supertype: each answer is a resource.
  - sling:resourceSuperType (STRING) = "cards/Resource" mandatory autocreated protected

  // A pseudo-link to the form this answer belongs to.
  // Normally this wouldn't be necessary, since the hierarchy of the two nodes makes it redundant,
  // but in queries ISDESCENDANTNODE(answer, form) is not yet efficiently implemented,
  // so we add this property to be able to do joins on answer.form = form.jcr:uuid.
  // This doesn't have to be a REFERENCE, since we don't want to overcrowd the references index,
  // and we don't want to list all the answers when trying to delete a form.
  - form (STRING) nofulltext

  // A reference to the question being answered.
  // Mandatory, every answer needs a question.
  // No full text search, since it's just a non-textual reference.
  - question (reference) mandatory nofulltext

  // An optional additional identifier for the question being answered, in case of questions allowing more than one answer.
  - questionInstanceLabel (string)

  // The value, undefined yet, must be properly typed by the concrete subtypes.
  - value (undefined)

  // Some questions may have been answered with long stories, which may have useful information.
  // We allow users to place these answers in a Note section
  - note (string)

  // A potentially empty list of status flags for the answer
  - statusFlags (STRING) autocreated multiple IGNORE

  // We don't define any subchildren.

//-----------------------------------------------------------------------------
// Yes/No
[cards:BooleanAnswer] > cards:Answer
  // Though we could use a boolean here, we want to handle three states (true/false/undefined), which is best defined by long.
  - value (long)

  // Hardcode the resource type.
  - sling:resourceType (STRING) = "cards/BooleanAnswer" mandatory autocreated protected

  // Hardcode the resource supertype.
  - sling:resourceSuperType (STRING) = "cards/Answer" mandatory autocreated protected

//-----------------------------------------------------------------------------
// Plain text
[cards:TextAnswer] > cards:Answer
  - value (string)

  // Hardcode the resource type.
  - sling:resourceType (STRING) = "cards/TextAnswer" mandatory autocreated protected

  // Hardcode the resource supertype.
  - sling:resourceSuperType (STRING) = "cards/Answer" mandatory autocreated protected

//-----------------------------------------------------------------------------
// Whole numbers
[cards:LongAnswer] > cards:Answer
  - value (long)

  // Hardcode the resource type.
  - sling:resourceType (STRING) = "cards/LongAnswer" mandatory autocreated protected

  // Hardcode the resource supertype.
  - sling:resourceSuperType (STRING) = "cards/Answer" mandatory autocreated protected

//-----------------------------------------------------------------------------
// Real numbers, stored as lossy "double" values.
// Should not be used to store values where precision is paramount, see DecimalAnswer instead.
[cards:DoubleAnswer] > cards:Answer
  - value (double)

  // Hardcode the resource type.
  - sling:resourceType (STRING) = "cards/DoubleAnswer" mandatory autocreated protected

  // Hardcode the resource supertype.
  - sling:resourceSuperType (STRING) = "cards/Answer" mandatory autocreated protected

//-----------------------------------------------------------------------------
// Decimal numbers, guaranteed to store the exact value entered.
[cards:DecimalAnswer] > cards:Answer
  - value (decimal)

  // Hardcode the resource type.
  - sling:resourceType (STRING) = "cards/DecimalAnswer" mandatory autocreated protected

  // Hardcode the resource supertype.
  - sling:resourceSuperType (STRING) = "cards/Answer" mandatory autocreated protected

//-----------------------------------------------------------------------------
// Date and DateTime
[cards:DateAnswer] > cards:Answer
  - value (date)

  // Hardcode the resource type.
  - sling:resourceType (STRING) = "cards/DateAnswer" mandatory autocreated protected

  // Hardcode the resource supertype.
  - sling:resourceSuperType (STRING) = "cards/Answer" mandatory autocreated protected

//-----------------------------------------------------------------------------
// Time
[cards:TimeAnswer] > cards:Answer
  - value (string)

  // Hardcode the resource type.
  - sling:resourceType (STRING) = "cards/TimeAnswer" mandatory autocreated protected

  // Hardcode the resource supertype.
  - sling:resourceSuperType (STRING) = "cards/Answer" mandatory autocreated protected

//-----------------------------------------------------------------------------
// Pedigree, stored mainly as a JSON representation, but also as a cached SVG image
[cards:PedigreeAnswer] > cards:Answer
  // The pedigree data is stored here, as a JSON
  - value (string)

  // The pedigree image is stored here, as a SVG file
  - image (string)

  // Hardcode the resource type.
  - sling:resourceType (STRING) = "cards/PedigreeAnswer" mandatory autocreated protected

  // Hardcode the resource supertype.
  - sling:resourceSuperType (STRING) = "cards/Answer" mandatory autocreated protected

//-----------------------------------------------------------------------------
// Vocabulary identifiers, stored as strings.
[cards:VocabularyAnswer] > cards:Answer
  - value (string)

  // Hardcode the resource type.
  - sling:resourceType (STRING) = "cards/VocabularyAnswer" mandatory autocreated protected

  // Hardcode the resource supertype.
  - sling:resourceSuperType (STRING) = "cards/Answer" mandatory autocreated protected

//-----------------------------------------------------------------------------
// Chromosome answers, stored as strings
[cards:ChromosomeAnswer] > cards:Answer
  - value (string)

  // Hardcode the resource type.
  - sling:resourceType (STRING) = "cards/ChromosomeAnswer" mandatory autocreated protected

  // Hardcode the resource supertype.
  - sling:resourceSuperType (STRING) = "cards/Answer" mandatory autocreated protected

//-----------------------------------------------------------------------------
// Computed answers, stored as strings
[cards:ComputedAnswer] > cards:Answer
  - value (string)

  // Hardcode the resource type.
  - sling:resourceType (STRING) = "cards/ComputedAnswer" mandatory autocreated protected

  // Hardcode the resource supertype.
  - sling:resourceSuperType (STRING) = "cards/Answer" mandatory autocreated protected

//-----------------------------------------------------------------------------
// File resource answers, whose children are nt:files with the answer
[cards:FileAnswer] > cards:Answer
  // The value holds the path to the JCR node storing the file
  - value (string)

  // The file is in a child nt:file resource
  + * (nt:file) = nt:file

  // Hardcode the resource type.
  - sling:resourceType (STRING) = "cards/FileAnswer" mandatory autocreated protected

  // Hardcode the resource supertype.
  - sling:resourceSuperType (STRING) = "cards/Answer" mandatory autocreated protected

//-----------------------------------------------------------------------------
// DICOM resource answers
[cards:DicomAnswer] > cards:Answer
  // The value holds the path to the JCR node storing the DICOM file
  - value (string)

  // The DICOM file is in a child nt:file resource
  + * (nt:file) = nt:file

  // Hardcode the resource type.
  - sling:resourceType (STRING) = "cards/DicomAnswer" mandatory autocreated protected

  // Hardcode the resource supertype.
  - sling:resourceSuperType (STRING) = "cards/Answer" mandatory autocreated protected

//-----------------------------------------------------------------------------
// Resource paths, stored as strings.
[cards:ResourceAnswer] > cards:Answer
  - value (string)

  // Hardcode the resource type.
  - sling:resourceType (STRING) = "cards/ResourceAnswer" mandatory autocreated protected

  // Hardcode the resource supertype.
  - sling:resourceSuperType (STRING) = "cards/Answer" mandatory autocreated protected


//-----------------------------------------------------------------------------


// Section object, which can contain multiple other answers and nested subsections.
// The node structure of a form should reflect the structure of a questionnaire, with AnswerSection nodes corresponding to each Section node in the questionnaire.
[cards:AnswerSection] > sling:Folder
  // Attributes
  // The child answers will need to be orderable.
  orderable

  // We can use answer sections in a query.
  query

  // The main sub-item of an answer is its section link.
  primaryitem section

  // Hardcode the resource type.
  - sling:resourceType (STRING) = "cards/AnswerSection" mandatory autocreated protected

  // Hardcode the resource supertype.
  - sling:resourceSuperType (STRING) = "cards/Resource" mandatory autocreated protected

  // A potentially empty list of status flags for the section
  - statusFlags (STRING) = autocreated multiple IGNORE

  // A reference to the section being answered.
  // Mandatory, every answer section is answering a section.
  // No full text search, since it's just a non-textual reference.
  - section (reference) mandatory nofulltext

  // Children

  // The answers and other answersections recorded in this section.
  + * (cards:Answer, cards:AnswerSection) = cards:Answer

//-----------------------------------------------------------------------------
// Forms: a filled in questionnaire.
[cards:Form] > sling:Folder, mix:referenceable, mix:versionable, mix:lastModified
  // Attributes

  // The answers in a form must be orderable.
  orderable
  // We can use forms in a query.
  query

  // Properties

  // Hardcode the resource type.
  - sling:resourceType (STRING) = "cards/Form" mandatory autocreated protected

  // Hardcode the resource supertype: each form is a resource.
  - sling:resourceSuperType (STRING) = "cards/Resource" mandatory autocreated protected

  // A potentially empty list of status flags for the form
  - statusFlags (STRING) = "INCOMPLETE" mandatory autocreated multiple IGNORE

  // A reference to the questionnaire being filled in.
  // Mandatory, every form has a questionnaire.
  // No full text search, since it's just a non-textual reference.
  - questionnaire (reference) mandatory nofulltext

  // A reference to the subject that this form is (primarily) about.
  // Although recommended to have a subject, this is optional for now.
  - subject (reference) nofulltext

  // A list of references to the subject that this form is about, and all its ancestor subjects, if any.
  - relatedSubjects (weakreference) nofulltext

  // Children

  // A link to another form
  + formReferences (cards:FormReferences)

  // The answers and answer sections recorded in this form.
  + * (cards:Answer, cards:AnswerSection) = cards:Answer

//-----------------------------------------------------------------------------
// The homepage for the Forms space.
[cards:FormsHomepage] > sling:Folder
  // Attributes:

  // We can use this homepage in a query.
  query

  // Properties:

  // Hardcode the resource type.
  - sling:resourceType (STRING) = "cards/FormsHomepage" mandatory autocreated protected

  // Hardcode the resource supertype: the FormsHomepage is a resource homepage.
  - sling:resourceSuperType (STRING) = "cards/ResourceHomepage" mandatory autocreated protected

  // Set a default title.
  - title (String) = "Data" mandatory autocreated

  - childNodeType (String) = "cards:Form" mandatory autocreated

  // Children

  // The list of forms.
  + * (cards:Form) = cards:Form

// The mapping between local questionnaire / question IDs and the corresponsing IDs within EPIC.
[cards:ExternalLink] > sling:Folder
  // Properties:

  // The type of the mapping, usually identifies the external system that we're mapping to.
  - type (string)

  // Corresponding ID in the external system.
  - value (string)

  // Hardcode the resource type.
  - sling:resourceType (STRING) = "cards/ExternalLink" mandatory autocreated protected

  // Hardcode the resource supertype.
  - sling:resourceSuperType (STRING) = "cards/Resource" mandatory autocreated protected

// A set of links to other forms
[cards:FormReferences] > sling:Folder
  // Properties:

  // A list of referenced forms
  + * (cards:FormReference) = cards:FormReference

  // Hardcode the resource type.
  - sling:resourceType (STRING) = "cards/FormReferences" mandatory autocreated protected

  // Hardcode the resource supertype.
  - sling:resourceSuperType (STRING) = "cards/Resource" mandatory autocreated protected

// A link to another form
[cards:FormReference] > sling:Folder
  // Properties:

  // The form being referenced.
  - reference (reference) mandatory nofulltext

  + referenceProperties (cards:ReferenceProperties) = cards:ReferenceProperties mandatory autocreated

  // Hardcode the resource type.
  - sling:resourceType (STRING) = "cards/FormReference" mandatory autocreated protected

  // Hardcode the resource supertype.
  - sling:resourceSuperType (STRING) = "cards/Resource" mandatory autocreated protected

[cards:ReferenceProperties] > sling:Folder
  // Properties

  // An optional label to be displayed instead of the default reference display.
  - label (string)

  // How the current form should behave when the referenced form is deleted
  // If true, delete the formReference's parent form when the referenced form is deleted.
  // If false, only delete the formReference
  - recursiveDeleteParent (BOOLEAN) = false mandatory autocreated

  // TODO: should the node version the parent form when modified
  // See OPV property here:
  // https://developer.adobe.com/experience-manager/reference-materials/spec/jcr/2.0/25_Appendix.html

  // If true, the referenced form should automatically reference back the current form
  - linkback (BOOLEAN) = false mandatory autocreated

  // The properties that the linkback should be created with if required
  + linkbackProperties (cards:ReferenceProperties)